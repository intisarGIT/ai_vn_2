from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import json
import os
from typing import Dict, List, Optional, Any

app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock database
mock_db = {
    "users": {},
    "stories": {},
    "scenes": {}
}

@app.get("/api/health")
async def health_check():
    return {"status": "ok", "message": "Backend is running"}

@app.post("/api/scene")
async def generate_scene(request: Dict[str, Any]):
    try:
        story_id = request.get("storyId")
        scene_number = request.get("sceneNumber")
        is_wrong_path = request.get("isWrongPath", False)
        
        if not story_id or scene_number is None:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        # Generate scene key
        scene_key = f"b_{scene_number}" if is_wrong_path else f"a_{scene_number}"
        
        # Mock scene data
        scene_data = {
            "sceneKey": scene_key,
            "text": [
                "This is a test scene generated by the mock backend.",
                "The AI would normally generate a more interesting story here.",
                "Your choices will determine the outcome of this adventure."
            ],
            "imageUrl": "/placeholder.svg?height=600&width=800",
            "options": ["Continue bravely", "Take a cautious approach"],
            "cached": False
        }
        
        return scene_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/story/create")
async def create_story(request: Dict[str, Any]):
    try:
        user_id = request.get("userId")
        genre = request.get("genre")
        
        if not user_id or not genre:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        # Generate a mock story ID
        story_id = f"story_{len(mock_db['stories']) + 1}"
        
        # Determine X Meter type based on genre
        x_meter_type = "Health"
        if genre == "romance":
            x_meter_type = "Trust"
        elif genre == "mystery":
            x_meter_type = "Reputation"
        
        # Create story
        mock_db["stories"][story_id] = {
            "id": story_id,
            "user_id": user_id,
            "genre": genre,
            "total_scenes": 5,
            "current_scene": 1,
            "x_meter": 100,
            "x_meter_type": x_meter_type,
            "is_completed": False,
            "is_victory": False
        }
        
        return {
            "storyId": story_id,
            "totalScenes": 5,
            "xMeterType": x_meter_type
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/pregenerate")
async def pregenerate_scenes(request: Dict[str, Any]):
    # This would normally generate scenes in the background
    return {"status": "ok", "message": "Pre-generation started"}

@app.post("/api/credits/purchase")
async def purchase_credits(request: Dict[str, Any]):
    try:
        user_id = request.get("userId")
        amount = request.get("amount", 100)
        
        if not user_id:
            raise HTTPException(status_code=400, detail="Missing user ID")
        
        # In a real implementation, this would process payment
        return {
            "success": True,
            "credits": amount,
            "message": f"Successfully purchased {amount} credits"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/storybook/generate")
async def generate_storybook(request: Dict[str, Any]):
    try:
        story_id = request.get("storyId")
        
        if not story_id:
            raise HTTPException(status_code=400, detail="Missing story ID")
        
        # In a real implementation, this would generate a PDF or similar
        return {
            "success": True,
            "url": "/placeholder.svg?height=600&width=800",
            "message": "Storybook generated successfully"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))